import cv2
import numpy as np

def split_into_cells(warped):
    cell_size = warped.shape[0] // 3
    return [warped[row * cell_size:(row + 1) * cell_size, col * cell_size:(col + 1) * cell_size]
            for row in range(3) for col in range(3)]

def classify_cell(cell_img):
    gray = cv2.cvtColor(cell_img, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)

    circles = cv2.HoughCircles(blurred, cv2.HOUGH_GRADIENT, dp=1.2, minDist=20,
                               param1=50, param2=30, minRadius=10, maxRadius=40)
    if circles is not None and len(circles[0]) > 0:
        return "O"

    edges = cv2.Canny(blurred, 30, 150, apertureSize=3)
    lines = cv2.HoughLinesP(edges, 1, np.pi / 180, threshold=8, minLineLength=10, maxLineGap=5)

    if lines is not None and len(lines) >= 2:
        angles = [np.arctan2(y2 - y1, x2 - x1) * 180 / np.pi for [[x1, y1, x2, y2]] in lines]
        if any(20 < a < 70 for a in angles) and any(-70 < a < -20 for a in angles):
            return "X"

    return "leer" if np.mean(gray) > 200 else "-"

def draw_play_state(image, labels):
    output = image.copy()
    cell_size = image.shape[0] // 3
    for i, label in enumerate(labels):
        row, col = divmod(i, 3)
        x = col * cell_size + cell_size // 2
        y = row * cell_size + cell_size // 2
        color = (0, 255, 0) if label == "O" else (255, 0, 0) if label == "X" else (128, 128, 128)
        cv2.putText(output, label, (x - 20, y + 10), cv2.FONT_HERSHEY_SIMPLEX, 1.8, color, 2, cv2.LINE_AA)
    return output

def get_board_warp(frame):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    gray = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8)).apply(gray)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    thresh = cv2.adaptiveThreshold(blurred, 255, cv2.ADAPTIVE_THRESH_MEAN_C,
                                   cv2.THRESH_BINARY_INV, 11, 3)
    dilated = cv2.dilate(thresh, np.ones((3, 3), np.uint8), iterations=2)
    contours, _ = cv2.findContours(dilated, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    max_area = 0
    best_cnt = None
    for cnt in contours:
        approx = cv2.approxPolyDP(cnt, 0.02 * cv2.arcLength(cnt, True), True)
        area = cv2.contourArea(approx)
        if len(approx) == 4 and area > 50000 and area > max_area:
            max_area = area
            best_cnt = approx

    if best_cnt is None:
        raise ValueError("Kein gültiger Rahmen gefunden.")

    pts = best_cnt.reshape(4, 2)
    rect = np.zeros((4, 2), dtype="float32")
    s = pts.sum(axis=1)
    diff = np.diff(pts, axis=1)
    rect[0] = pts[np.argmin(s)]
    rect[2] = pts[np.argmax(s)]
    rect[1] = pts[np.argmin(diff)]
    rect[3] = pts[np.argmax(diff)]

    side = 450
    dst = np.array([[0, 0], [side-1, 0], [side-1, side-1], [0, side-1]], dtype="float32")
    M = cv2.getPerspectiveTransform(rect, dst)
    return cv2.warpPerspective(frame, M, (side, side))

# Kamerazugriff starten
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        print("Kein Kamerabild empfangen – ist die Kamera angeschlossen?")
        break

    try:
        warped = get_board_warp(frame)
        cells = split_into_cells(warped)
        spielstand = [classify_cell(cell) for cell in cells]
        result = draw_play_state(warped, spielstand)
        cv2.imshow("Tic-Tac-Toe-Erkennung", result)
    except Exception as e:
        cv2.putText(frame, "Spielfeld nicht erkannt", (20, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
        cv2.imshow("Tic-Tac-Toe-Erkennung", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
