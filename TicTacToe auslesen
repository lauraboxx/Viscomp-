import cv2
import numpy as np

def sort_lines(lines, axis='x'):
    """Hilfsfunktion: Sortiere Linien nach x- oder y-Koordinate"""
    if axis == 'x':
        return sorted(lines, key=lambda line: line[0][0])  # x1
    else:
        return sorted(lines, key=lambda line: line[0][1])  # y1


# === Schritt 1: Bild laden ===
image = cv2.imread("/Users/lauraboch/Documents/Uni/Visual Computing/TicTacToeTest.png")
orig = image.copy()
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# === Schritt 2: Kanten finden ===
blurred = cv2.GaussianBlur(gray, (5, 5), 0)
edges = cv2.Canny(blurred, 50, 150, apertureSize=3)

# === Schritt 3: Hough-Transformation für Linien ===
lines = cv2.HoughLinesP(edges, 1, np.pi / 180, threshold=100, minLineLength=100, maxLineGap=10)

# Linien nach Orientierung filtern (grob)
horizontal = []
vertical = []
for line in lines:
    x1, y1, x2, y2 = line[0]
    if abs(x1 - x2) < 20:  # fast vertikal
        vertical.append(line)
    elif abs(y1 - y2) < 20:  # fast horizontal
        horizontal.append(line)

# Sortieren
vertical = sort_lines(vertical, axis='x')
horizontal = sort_lines(horizontal, axis='y')

# Spielfeldgrenzen finden (äußere Linien)
if len(vertical) >= 2 and len(horizontal) >= 2:
    top = horizontal[0][0][1]
    bottom = horizontal[-1][0][1]
    left = vertical[0][0][0]
    right = vertical[-1][0][0]

    # Vier Eckpunkte definieren
    pts1 = np.float32([[left, top], [right, top], [left, bottom], [right, bottom]])
    pts2 = np.float32([[0, 0], [300, 0], [0, 300], [300, 300]])

    # Perspektivtransformation (Entzerrung)
    M = cv2.getPerspectiveTransform(pts1, pts2)
    warped = cv2.warpPerspective(orig, M, (300, 300))

    # Anzeige
    cv2.imshow("Entzerrtes Spielfeld", warped)
    cv2.waitKey(2000)
    cv2.destroyAllWindows()
else:
    print("Nicht genug Linien erkannt.")

print("HelloWorld1")


def split_into_cells(warped):
    """Teilt ein 300x300 Bild in 9 Zellen auf und gibt sie als Liste zurück"""
    cell_size = warped.shape[0] // 3  # = 100
    cells = []
    
    for row in range(3):
        for col in range(3):
            x_start = col * cell_size
            y_start = row * cell_size
            cell = warped[y_start:y_start + cell_size, x_start:x_start + cell_size]
            cells.append(cell)
    
    return cells
print("HelloWorld2")
# Spielfeld aufteilen
cells = split_into_cells(warped)

# Vorschau der Zellen anzeigen
for i, cell in enumerate(cells):
    cv2.imshow(f"Zelle {i}", cell)
    cv2.waitKey(2000)

    cv2.destroyAllWindows()
print("HelloWorld1")

def classify_cell(cell_img):
    gray = cv2.cvtColor(cell_img, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)

    # === Kreis-Erkennung ===
    circles = cv2.HoughCircles(
        blurred, 
        cv2.HOUGH_GRADIENT, dp=1.2, minDist=20,
        param1=50, param2=30, minRadius=10, maxRadius=40
    )
    if circles is not None and len(circles[0]) > 0:
        return "O"

    # === Kreuz-Erkennung ===
    edges = cv2.Canny(blurred, 30, 150, apertureSize=3)
    lines = cv2.HoughLinesP(edges, 1, np.pi / 180, threshold=8, minLineLength=10, maxLineGap=5)

    if lines is not None and len(lines) >= 2:
        angles = []
        for line in lines:
            x1, y1, x2, y2 = line[0]
            angle = np.arctan2(y2 - y1, x2 - x1) * 180 / np.pi
            angles.append(angle)

        # Suche nach einer Linie mit ca. +45° und einer mit ca. -45°
        has_pos_diag = any(20 < a < 70 for a in angles)
        has_neg_diag = any(-70 < a < -20 for a in angles)

        if has_pos_diag and has_neg_diag:
            return "X"

    # === Leer oder undefiniert ===
    if np.mean(gray) > 200:
        return "leer"
    else:
        return "undefiniert"



spielstand = []
for i, cell in enumerate(cells):
    label = classify_cell(cell)
    spielstand.append(label)
    print(f"Zelle {i}: {label}")
